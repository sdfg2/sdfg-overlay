Only in svn: .svn
diff -crB tarball/Makefile svn/Makefile
*** tarball/Makefile	2013-07-07 09:54:00.000000000 +0100
--- svn/Makefile	2014-07-26 14:22:37.595557376 +0100
***************
*** 1,17 ****
  
! COMPILER = gcc
  
! LIBPURPLE_CFLAGS += $(shell pkg-config --cflags glib-2.0 json-glib-1.0 purple nss gnome-keyring-1)
! LIBPURPLE_LIBS += $(shell pkg-config --libs glib-2.0 json-glib-1.0 purple nss)
  
! STEAM_SOURCES = \
! 	steam_connection.c \
! 	libsteam.c 
  
- .PHONY:	all clean install
- all: libsteam.so
  clean:
! 	rm -f libsteam.so
  
! libsteam.so: ${STEAM_SOURCES}
! 	${COMPILER} -Wall -I. -g -O2 -fPIC -pipe ${STEAM_SOURCES} -o $@ ${LIBPURPLE_CFLAGS} ${LIBPURPLE_LIBS} -shared
--- 1,33 ----
+ CC ?= gcc
+ PKG_CONFIG ?= pkg-config
+ INSTALL = install
+ INSTALL_PROGRAM = $(INSTALL) -Dm755
  
! PLUGINDIR ?= $(shell $(PKG_CONFIG) --variable=plugindir purple)
  
! CFLAGS ?= -O2 -pipe
! CFLAGS += -Wall -fPIC -DUSE_POLARSSL_CRYPTO
! LDFLAGS += -shared
! CPPFLAGS += $(shell $(PKG_CONFIG) --cflags glib-2.0 json-glib-1.0 purple nss gnome-keyring-1)
! LIBS += $(shell $(PKG_CONFIG) --libs glib-2.0 json-glib-1.0 purple nss polarssl) -lpolarssl
  
! TARGET = libsteam.so
! 
! OBJS = libsteam.o steam_connection.o
! 
! %.o: %.c %.h
! 	$(CC) $(CFLAGS) $(CPPFLAGS) -c $*.c
! 
! $(TARGET): $(OBJS)
! 	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $(OBJS) $(LIBS)
! 
! install: $(TARGET)
! 	$(INSTALL_PROGRAM) $(TARGET) "$(DESTDIR)$(PLUGINDIR)/$(TARGET)"
! 
! uninstall:
! 	rm -f "$(DESTDIR)$(PLUGINDIR)/$(TARGET)"
  
  clean:
! 	rm -f $(OBJS) $(TARGET)
  
! .PHONY: uninstall clean
Only in svn: libjson-glib-1.0.dll
diff -crB tarball/libsteam.c svn/libsteam.c
*** tarball/libsteam.c	2014-01-14 20:26:39.000000000 +0000
--- svn/libsteam.c	2014-07-25 21:59:20.012670613 +0100
***************
*** 1,10 ****
- 
- 
  #include "libsteam.h"
  #include "steam_connection.h"
  
  static gboolean core_is_haze = FALSE;
  
  #ifdef G_OS_UNIX
  #include <gnome-keyring.h>
  #include <dlfcn.h>
--- 1,13 ----
  #include "libsteam.h"
  #include "steam_connection.h"
  
  static gboolean core_is_haze = FALSE;
  
+ // Hack to fix OSX compatibility :)
+ #ifdef __APPLE__
+ #undef G_OS_UNIX
+ #endif
+ 
  #ifdef G_OS_UNIX
  #include <gnome-keyring.h>
  #include <dlfcn.h>
***************
*** 222,227 ****
--- 225,232 ----
  	steam_post_or_get(sa, STEAM_METHOD_GET | STEAM_METHOD_SSL, "steamcommunity.com", "/mobilesettings/GetManifest/v0001", NULL, steam_fetch_new_sessionid_cb, NULL, FALSE);
  }
  
+ static guint active_icon_downloads = 0;
+ 
  static void
  steam_get_icon_cb(PurpleUtilFetchUrlData *url_data, gpointer user_data, const gchar *url_text, gsize len, const gchar *error_message)
  {
***************
*** 234,243 ****
  	sbuddy = buddy->proto_data;
  	
  	purple_buddy_icons_set_for_user(buddy->account, buddy->name, g_memdup(url_text, len), len, sbuddy->avatar);
  }
  
  static void
! steam_get_icon(PurpleBuddy *buddy)
  {
  	const gchar *old_avatar = purple_buddy_icons_get_checksum_for_user(buddy);
  	SteamBuddy *sbuddy;
--- 239,250 ----
  	sbuddy = buddy->proto_data;
  	
  	purple_buddy_icons_set_for_user(buddy->account, buddy->name, g_memdup(url_text, len), len, sbuddy->avatar);
+ 	
+ 	active_icon_downloads--;
  }
  
  static void
! steam_get_icon_now(PurpleBuddy *buddy)
  {
  	const gchar *old_avatar = purple_buddy_icons_get_checksum_for_user(buddy);
  	SteamBuddy *sbuddy;
***************
*** 259,264 ****
--- 266,294 ----
  #else
  	purple_util_fetch_url_request(sbuddy->avatar, TRUE, NULL, FALSE, NULL, FALSE, steam_get_icon_cb, buddy);
  #endif
+ 
+ 	active_icon_downloads++;
+ }
+ 
+ static gboolean
+ steam_get_icon_queuepop(gpointer data)
+ {
+ 	PurpleBuddy *buddy = data;
+ 	
+ 	// Only allow 4 simultaneous downloads
+ 	if (active_icon_downloads > 4)
+ 		return TRUE;
+ 	
+ 	steam_get_icon_now(buddy);
+ 	return FALSE;
+ }
+ 
+ static void
+ steam_get_icon(PurpleBuddy *buddy)
+ {
+ 	if (!buddy) return;
+ 	
+ 	purple_timeout_add(100, steam_get_icon_queuepop, (gpointer)buddy);
  }
  
  static void steam_poll(SteamAccount *sa, gboolean secure, guint message);
***************
*** 490,496 ****
  					} else {
  						text = g_strdup(json_object_get_string_member(message, "text"));
  					}
! 					html = purple_strdup_withhtml(text);
  					from = json_object_get_string_member(message, "steamid_from");
  					if (g_str_has_prefix(type, "my_")) {
  						PurpleConversation *conv = purple_find_conversation_with_account(PURPLE_CONV_TYPE_IM, from, sa->account);
--- 520,526 ----
  					} else {
  						text = g_strdup(json_object_get_string_member(message, "text"));
  					}
! 					html = purple_markup_escape_text(text, -1);
  					from = json_object_get_string_member(message, "steamid_from");
  					if (g_str_has_prefix(type, "my_")) {
  						PurpleConversation *conv = purple_find_conversation_with_account(PURPLE_CONV_TYPE_IM, from, sa->account);
***************
*** 651,656 ****
--- 681,687 ----
  		g_free(sbuddy->gameextrainfo); sbuddy->gameextrainfo = json_object_has_member(player, "gameextrainfo") ? g_strdup(json_object_get_string_member(player, "gameextrainfo")) : NULL;
  		g_free(sbuddy->gameserversteamid); sbuddy->gameserversteamid = json_object_has_member(player, "gameserversteamid") ? g_strdup(json_object_get_string_member(player, "gameserversteamid")) : NULL;
  		g_free(sbuddy->lobbysteamid); sbuddy->lobbysteamid = json_object_has_member(player, "lobbysteamid") ? g_strdup(json_object_get_string_member(player, "lobbysteamid")) : NULL;
+ 		g_free(sbuddy->gameserverip); sbuddy->gameserverip = json_object_has_member(player, "gameserverip") ? g_strdup(json_object_get_string_member(player, "gameserverip")) : NULL;
  		
  		sbuddy->lastlogoff = (guint) json_object_get_int_member(player, "lastlogoff");
  		
***************
*** 812,823 ****
  		purple_notify_user_info_add_pair_html(user_info, "Real Name", sbuddy->realname);
  		if (sbuddy->gameextrainfo)
  		{
  			if (sbuddy->gameid)
  			{
! 				purple_notify_user_info_add_pair_html(user_info, "In game", sbuddy->gameextrainfo);
  			} else {
! 				purple_notify_user_info_add_pair_html(user_info, "In non-Steam game", sbuddy->gameextrainfo);
  			}
  		}
  	}
  }
--- 843,856 ----
  		purple_notify_user_info_add_pair_html(user_info, "Real Name", sbuddy->realname);
  		if (sbuddy->gameextrainfo)
  		{
+ 			gchar *gamename = purple_strdup_withhtml(sbuddy->gameextrainfo);
  			if (sbuddy->gameid)
  			{
! 				purple_notify_user_info_add_pair_html(user_info, "In game", gamename);
  			} else {
! 				purple_notify_user_info_add_pair_html(user_info, "In non-Steam game", gamename);
  			}
+ 			g_free(gamename);
  		}
  	}
  }
***************
*** 1270,1276 ****
  	g_string_append_printf(post, "access_token=%s&", purple_url_encode(steam_account_get_access_token(sa)));
  	g_string_append_printf(post, "umqid=%s&", purple_url_encode(sa->umqid));
  	
! 	stripped = purple_markup_strip_html(msg);
  	g_string_append(post, "type=saytext&");
  	g_string_append_printf(post, "text=%s&", purple_url_encode(stripped));
  	g_string_append_printf(post, "steamid_dst=%s", who);
--- 1303,1309 ----
  	g_string_append_printf(post, "access_token=%s&", purple_url_encode(steam_account_get_access_token(sa)));
  	g_string_append_printf(post, "umqid=%s&", purple_url_encode(sa->umqid));
  	
! 	stripped = purple_unescape_html(msg);
  	g_string_append(post, "type=saytext&");
  	g_string_append_printf(post, "text=%s&", purple_url_encode(stripped));
  	g_string_append_printf(post, "steamid_dst=%s", who);
***************
*** 1299,1304 ****
--- 1332,1338 ----
  		g_free(sbuddy->gameextrainfo);
  		g_free(sbuddy->gameserversteamid);
  		g_free(sbuddy->lobbysteamid);
+ 		g_free(sbuddy->gameserverip);
  		
  		g_free(sbuddy);
  	}
***************
*** 1309,1314 ****
--- 1343,1353 ----
  {
  	// Do nothing to stop the remove+add behaviour
  }
+ void
+ steam_fake_group_rename(PurpleConnection *pc, const char *old_name, PurpleGroup *group, GList *moved_buddies)
+ {
+ 	// Do nothing to stop the remove+add behaviour
+ }
  
  void
  #if PURPLE_VERSION_CHECK(3, 0, 0)
***************
*** 1343,1351 ****
  static gboolean plugin_load(PurplePlugin *plugin)
  {
  	purple_debug_info("steam", "Purple core UI name: %s\n", purple_core_get_ui());
- 	core_is_haze = g_str_equal(purple_core_get_ui(), "haze");
  	
  #ifdef G_OS_UNIX
  	if (core_is_haze && gnome_keyring_lib == NULL) {
  		purple_debug_info("steam", "UI Core is Telepathy-Haze, attempting to load Gnome-Keyring\n");
  		
--- 1382,1391 ----
  static gboolean plugin_load(PurplePlugin *plugin)
  {
  	purple_debug_info("steam", "Purple core UI name: %s\n", purple_core_get_ui());
  	
  #ifdef G_OS_UNIX
+ 	core_is_haze = g_str_equal(purple_core_get_ui(), "haze");
+ 	
  	if (core_is_haze && gnome_keyring_lib == NULL) {
  		purple_debug_info("steam", "UI Core is Telepathy-Haze, attempting to load Gnome-Keyring\n");
  		
***************
*** 1395,1400 ****
--- 1435,1488 ----
  }
  
  void
+ steam_blist_launch_game(PurpleBlistNode *node, gpointer data)
+ {
+ 	PurpleBuddy *buddy;
+ 	SteamBuddy *sbuddy;
+ 	PurplePlugin *handle = purple_find_prpl(STEAM_PLUGIN_ID);
+ 	
+ 	if(!PURPLE_BLIST_NODE_IS_BUDDY(node))
+ 		return;
+ 	buddy = (PurpleBuddy *) node;
+ 	if (!buddy)
+ 		return;
+ 	sbuddy = buddy->proto_data;
+ 	if (sbuddy && sbuddy->gameid) 
+ 	{
+ 		gchar *runurl = g_strdup_printf("steam://rungameid/%s", sbuddy->gameid);
+ 		purple_notify_uri(handle, runurl);
+ 		g_free(runurl);
+ 	}
+ }
+ 
+ void
+ steam_blist_join_game(PurpleBlistNode *node, gpointer data)
+ {
+ 	PurpleBuddy *buddy;
+ 	SteamBuddy *sbuddy;
+ 	PurplePlugin *handle = purple_find_prpl(STEAM_PLUGIN_ID);
+ 	
+ 	if(!PURPLE_BLIST_NODE_IS_BUDDY(node))
+ 		return;
+ 	buddy = (PurpleBuddy *) node;
+ 	if (!buddy)
+ 		return;
+ 	sbuddy = buddy->proto_data;
+ 	if (sbuddy) {
+ 		if (sbuddy->gameserverip && (!sbuddy->gameserversteamid || !g_str_equal(sbuddy->gameserversteamid, "1"))) 
+ 		{
+ 			gchar *joinurl = g_strdup_printf("steam://connect/%s", sbuddy->gameserverip);
+ 			purple_notify_uri(handle, joinurl);
+ 			g_free(joinurl);
+ 		} else if (sbuddy->lobbysteamid) {
+ 			gchar *joinurl = g_strdup_printf("steam://joinlobby/%s/%s/%s", sbuddy->gameid, sbuddy->lobbysteamid, sbuddy->steamid);
+ 			purple_notify_uri(handle, joinurl);
+ 			g_free(joinurl);
+ 		}
+ 	}
+ }
+ 
+ void
  steam_blist_view_profile(PurpleBlistNode *node, gpointer data)
  {
  	PurpleBuddy *buddy;
***************
*** 1422,1427 ****
--- 1510,1516 ----
  	GList *m = NULL;
  	PurpleMenuAction *act;
  	PurpleBuddy *buddy;
+ 	SteamBuddy *sbuddy;
  	
  	if(PURPLE_BLIST_NODE_IS_BUDDY(node))
  	{
***************
*** 1431,1436 ****
--- 1520,1543 ----
  				PURPLE_CALLBACK(steam_blist_view_profile),
  				NULL, NULL);
  		m = g_list_append(m, act);
+ 		
+ 		sbuddy = buddy->proto_data;
+ 		if (sbuddy && sbuddy->gameid)
+ 		{
+ 			act = purple_menu_action_new("Launch Game",
+ 					PURPLE_CALLBACK(steam_blist_launch_game),
+ 					NULL, NULL);
+ 			m = g_list_append(m, act);
+ 			
+ 			if (sbuddy->lobbysteamid || 
+ 				(sbuddy->gameserverip && (!sbuddy->gameserversteamid || !g_str_equal(sbuddy->gameserversteamid, "1")))) 
+ 			{
+ 				act = purple_menu_action_new("Join Game",
+ 						PURPLE_CALLBACK(steam_blist_join_game),
+ 						NULL, NULL);
+ 				m = g_list_append(m, act);
+ 			}
+ 		}
  	}
  	return m;
  }
***************
*** 1514,1520 ****
  #endif
  	NULL,                   /* alias_buddy */
  	steam_fake_group_buddy,    /* group_buddy */
! 	NULL,//steam_group_rename,        /* rename_group */
  	steam_buddy_free,          /* buddy_free */
  	NULL,//steam_conversation_closed, /* convo_closed */
  	purple_normalize_nocase,/* normalize */
--- 1621,1627 ----
  #endif
  	NULL,                   /* alias_buddy */
  	steam_fake_group_buddy,    /* group_buddy */
! 	steam_fake_group_rename,   /* rename_group */
  	steam_buddy_free,          /* buddy_free */
  	NULL,//steam_conversation_closed, /* convo_closed */
  	purple_normalize_nocase,/* normalize */
diff -crB tarball/libsteam.h svn/libsteam.h
*** tarball/libsteam.h	2013-12-13 02:28:51.000000000 +0000
--- svn/libsteam.h	2014-07-25 21:59:20.020670641 +0100
***************
*** 63,69 ****
  #define FB_MAX_MSG_RETRY 2
  
  #define STEAM_PLUGIN_ID "prpl-steam-mobile"
! #define STEAM_PLUGIN_VERSION "1.3"
  
  typedef struct _SteamAccount SteamAccount;
  typedef struct _SteamBuddy SteamBuddy;
--- 63,69 ----
  #define FB_MAX_MSG_RETRY 2
  
  #define STEAM_PLUGIN_ID "prpl-steam-mobile"
! #define STEAM_PLUGIN_VERSION "1.4"
  
  typedef struct _SteamAccount SteamAccount;
  typedef struct _SteamBuddy SteamBuddy;
***************
*** 109,114 ****
--- 109,115 ----
  	gchar *gameextrainfo;
  	gchar *gameserversteamid;
  	gchar *lobbysteamid;
+ 	gchar *gameserverip;
  };
  
  
Only in svn: releases
Only in svn: steam16.png
Only in svn: steam22.png
Only in svn: steam48.png
diff -crB tarball/steam_rsa.c svn/steam_rsa.c
*** tarball/steam_rsa.c	2013-06-10 07:07:53.000000000 +0100
--- svn/steam_rsa.c	2014-07-25 21:59:20.010670606 +0100
***************
*** 9,14 ****
--- 9,23 ----
  
  */
  
+ #if defined USE_OPENSSL_CRYPTO && !defined __APPLE__
+ #undef USE_OPENSSL_CRYPTO
+ #endif
+ 
+ #if !defined USE_POLARSSL_CRYPTO && !defined USE_OPENSSL_CRYPTO && !defined USE_NSS_CRYPTO
+ #define USE_NSS_CRYPTO
+ #endif
+ 
+ #ifdef USE_NSS_CRYPTO
  
  #include <nss.h>
  #include <base64.h>
***************
*** 128,130 ****
--- 137,283 ----
  	
  	return output;
  }
+ 
+ #elif defined USE_POLARSSL_CRYPTO
+ 
+ #include "polarssl/config.h"
+ #include "polarssl/rsa.h"
+ #include "polarssl/entropy.h"
+ #include "polarssl/ctr_drbg.h"
+ 
+ gchar *
+ steam_encrypt_password(const gchar *modulus_str, const gchar *exponent_str, const gchar *password)
+ {
+ 	rsa_context rsa;
+ 	entropy_context entropy;
+ 	ctr_drbg_context ctr_drbg;
+ 	int ret;
+ 	guchar *encrypted_password;
+ 	gchar *output;
+ 
+ 	// Init entropy context
+ 	entropy_init(&entropy);
+ 	ret = ctr_drbg_init(&ctr_drbg, entropy_func, &entropy, NULL, 0);
+ 
+ 	if (ret != 0) {
+ 		purple_debug_error("steam", "RSA init failed, error=%d\n", ret);
+ 		return NULL;
+ 	}
+ 
+ 	// Init polarssl rsa
+ 	rsa_init(&rsa, RSA_PKCS_V15, 0);
+ 
+ 	// Read modulus
+ 	ret = mpi_read_string(&rsa.N, 16, modulus_str);
+ 	if (ret != 0) {
+ 		purple_debug_error("steam", "modulus parsing failed, error=%d\n", ret);
+ 		return NULL;
+ 	}
+ 
+ 	// Read exponent
+ 	ret = mpi_read_string(&rsa.E, 16, exponent_str);
+ 	if (ret != 0) {
+ 		purple_debug_error("steam", "exponent parsing failed, error=%d\n", ret);
+ 		return NULL;
+ 	}
+ 
+ 	// Set RSA key length
+ 	rsa.len = ( mpi_msb( &rsa.N ) + 7 ) >> 3;
+ 
+ 	// Allocate space for encrypted password
+ 	encrypted_password = g_new0(guchar, rsa.len);
+ 
+ 	ret = rsa_pkcs1_encrypt(&rsa, ctr_drbg_random, &ctr_drbg, RSA_PUBLIC, strlen(password), (unsigned char*)password, encrypted_password);
+ 
+ 	if (ret != 0) {
+ 		purple_debug_error("steam", "password encryption failed, error=%d\n", ret);
+ 		g_free(encrypted_password);
+ 		return NULL;
+ 	}
+ 
+ 	output = purple_base64_encode(encrypted_password, (int)rsa.len);
+ 	g_free(encrypted_password);
+ 
+ 	return output;
+ }
+ 
+ #elif defined USE_OPENSSL_CRYPTO
+ 
+ #include <openssl/rsa.h>
+ #include <openssl/bio.h>
+ #include <openssl/bn.h>
+ #include <openssl/err.h>
+ #include <openssl/evp.h>
+ #include <openssl/engine.h>
+ 
+ gchar *
+ steam_encrypt_password_openssl(const gchar *modulus_str, const gchar *exponent_str, const gchar *password)
+ {
+ 	BIGNUM *bn_modulus;
+ 	BIGNUM *bn_exponent;
+ 	RSA *rsa;
+ 	gchar *output = NULL;
+ 	guchar *encrypted;
+ 	int rv;
+ 	
+ 	ERR_load_crypto_strings();
+ 	
+ 	bn_modulus = BN_new();
+ 	rv = BN_hex2bn(&bn_modulus, modulus_str);
+ 	if (rv == 0)
+ 	{
+ 		purple_debug_error("steam", "modulus hext to bignum parse failed\n");
+ 		BN_free(bn_modulus);
+ 		return NULL;
+ 	}
+ 	
+ 	bn_exponent = BN_new();
+ 	rv = BN_hex2bn(&bn_exponent, exponent_str);
+ 	if (rv == 0)
+ 	{
+ 		purple_debug_error("steam", "exponent hex to bignum parse failed\n");
+ 		BN_clear_free(bn_modulus);
+ 		BN_clear_free(bn_exponent);
+ 		return NULL;
+ 	}
+ 	
+ 	rsa = RSA_new();
+ 	if (rsa == NULL)
+ 	{
+ 		purple_debug_error("steam", "RSA structure allocation failed\n");
+ 		BN_free(bn_modulus);
+ 		BN_free(bn_exponent);
+ 		return NULL;
+ 	}
+ 	BN_free(rsa->n);
+ 	rsa->n = bn_modulus;
+ 	BN_free(rsa->e);
+ 	rsa->e = bn_exponent;
+ 	
+ 	encrypted = g_new0(guchar, RSA_size(rsa));
+ 	rv = RSA_public_encrypt((int)(strlen(password)),
+                           (const unsigned char *)password,
+                           encrypted,
+                           rsa,
+                           RSA_PKCS1_PADDING);
+ 	if (rv < 0)
+ 	{
+ 		unsigned long error_num = ERR_get_error();
+ 		char *error_str = ERR_error_string(error_num, NULL);
+ 		purple_debug_error("steam", error_str);
+ 		RSA_free(rsa);
+ 		g_free(encrypted);
+ 		return NULL;
+ 	}
+ 	
+ 	output = purple_base64_encode(encrypted, RSA_size(rsa));
+ 	
+ 	// Cleanup
+ 	RSA_free(rsa);
+ 	ERR_free_strings();
+ 	g_free(encrypted);
+ 	
+ 	return output;
+ }
+ 
+ #endif
\ No newline at end of file
